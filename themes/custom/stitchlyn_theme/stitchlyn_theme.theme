<?php

use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\file\Entity\File;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_paragraph__feature_item().
 */
function stitchlyn_theme_preprocess_paragraph(array &$variables) {
  $paragraph = $variables['paragraph'];

  if ($paragraph->bundle() === 'feature_item' || $paragraph->bundle() === 'simple_card_item' ) {
    // Make sure the field_icon is not empty.
    if (!$paragraph->get('field_icon')->isEmpty()) {
      // Get the string value from the text field.
      $icon_value = $paragraph->get('field_icon')->value;

      // Pass it to the Twig template.
      $variables['icon'] = $icon_value;
    }
  }

  if ($paragraph->bundle() === 'st') {
    if (!$paragraph->get('field_stat_number')->isEmpty()) {
      $stat_number = $paragraph->get('field_stat_number')->value;
      $variables['stat_number_value'] = $stat_number;
    }
    if (!$paragraph->get('field_stat_label')->isEmpty()) {
      $stat_label = $paragraph->get('field_stat_label')->value;
      $variables['stat_number_label'] = $stat_label;
    }
  }

  if ($paragraph->bundle() == 'cta_banner') {

    if (!$paragraph->get('field_banner_button_1')->isEmpty()) {
      $link_item = $paragraph->get('field_banner_button_1')->first();
      $url = $link_item->getUrl();
      $title = $link_item->title;

      // Get actual URL as a string.
      $variables['link_url_1'] = $url->toString();
      $variables['link_title_1'] = $title ?: $url->toString(); // fallback to URL if no title
    }
    if (!$paragraph->get('field_banner_button_2')->isEmpty()) {
      $link_item = $paragraph->get('field_banner_button_2')->first();
      $url = $link_item->getUrl();
      $title = $link_item->title;

      // Get actual URL as a string.
      $variables['link_url_2'] = $url->toString();
      $variables['link_title_2'] = $title ?: $url->toString(); // fallback to URL if no title
    }    
  }

  if ($paragraph->bundle() == 'banner_item') {
    if (!$paragraph->get('field_banner_image')->isEmpty()) {
      $image_item = $paragraph->get('field_banner_image')->first();
      $file = \Drupal\file\Entity\File::load($image_item->target_id);
      if ($file) {
        $uri = $file->getFileUri();
        $url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
        $variables['banner_item_image_url'] = $url;
      }
    }
  }

  if ($paragraph->bundle() == 'type_a_card_cta') {
    if (!$paragraph->get('field_image')->isEmpty()) {
      $image_item = $paragraph->get('field_image')->first();
      $file = \Drupal\file\Entity\File::load($image_item->target_id);
      if ($file) {
        $uri = $file->getFileUri();
        $url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
        $variables['paragraph_image_url'] = $url;
      }
    }
  }

}

/**
 * Implements hook_preprocess_page().
 */
function stitchlyn_theme_preprocess_page(array &$variables) {
  // Main Menu
  $main_menu = \Drupal::menuTree()->load('main', new MenuTreeParameters());
  $variables['page']['main_menu'] = \Drupal::menuTree()->build($main_menu);

  // Account Menu
  $account_menu = \Drupal::menuTree()->load('account', new MenuTreeParameters());
  $variables['page']['account_menu'] = \Drupal::menuTree()->build($account_menu);

  // Support Menu (custom format)
  $variables['page']['support_menu'] = _stitchlyn_prepare_menu_array('support');

  // Social Links Menu (custom format)
  $variables['page']['social_links'] = _stitchlyn_prepare_menu_array('social-links');

  // Footer Quick Links Menu (optional)
  $variables['page']['footer_menu'] = _stitchlyn_prepare_menu_array('footer');

  // Backend Sidebar Menu
  $variables['page']['backend_menu'] = _stitchlyn_prepare_menu_array('backend');
}

/**
 * Helper to convert a menu to a title/url array.
 */
function _stitchlyn_prepare_menu_array($menu_name) {
  $items = [];
  $tree = \Drupal::menuTree()->load($menu_name, new MenuTreeParameters());
  $manipulated = \Drupal::menuTree()->transform($tree, []);
  foreach ($manipulated as $item) {
    if (isset($item->link)) {
      $items[] = [
        'title' => $item->link->getTitle(),
        'url' => $item->link->getUrlObject()->toString(),
      ];
    }
  }
  return $items;
}

function _stitchlyn_prepare_menu_child_array($menu_name) {
  $items = [];
  $tree = \Drupal::menuTree()->load($menu_name, new MenuTreeParameters());
  $manipulated = \Drupal::menuTree()->transform($tree, []);
  foreach ($manipulated as $item) {
    if (isset($item->link)) {
      $menu_item = [
        'title' => $item->link->getTitle(),
        'url' => $item->link->getUrlObject()->toString(),
      ];

      // Add children if available
      if (!empty($item->subtree)) {
        $menu_item['children'] = [];
        foreach ($item->subtree as $child) {
          if (isset($child->link)) {
            $menu_item['children'][] = [
              'title' => $child->link->getTitle(),
              'url' => $child->link->getUrlObject()->toString(),
            ];
          }
        }
      }

      $items[] = $menu_item;
    }
  }
  return $items;
}


function stitchlyn_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if (strpos(\Drupal::request()->getPathInfo(), '/dashboard') === 0) {
    $suggestions[] = 'page__dashboard';
  }
}